name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build_and_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.2'
      
      - name: Install dependencies
        run: go mod download
          
      - name: Test with the Go CLI
        run: go test ./...

      - name: Build the application
        run: |
          mkdir -p dist
          go build -o dist/main ./...

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: dist
          if-no-files-found: warn
          
      - name: Output Run ID
        run: echo ${{ github.run_id }}
      - name: Output Run Number
        run: echo ${{ github.run_number }}
      - name: Output Run Attempt
        run: echo ${{ github.run_attempt }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version from versions.txt
        id: version
        run: |
          # Extract version from versions.txt (after 'VERSION: ')
          VERSION=$(grep -oP '(?<=VERSION: )v\d+\.\d+\.\d+' version.txt)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version extracted: $VERSION"

      - name: Build Docker image with extracted version
        run: |
          docker build -t manisankardivi/new:${{ env.VERSION }} .

      - name: Push Docker image
        run: |
          docker push manisankardivi/new:${{ env.VERSION }}


  # deploy:
  #   runs-on: self-hosted
  #   needs: build_and_scan  # Ensures this job only runs after build_and_scan completes
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Check manifest files
  #       run: ls -la
        
  #     - name: Replace the placeholder in manifest.yaml with the new version
  #       run: |
  #         sed -i "s|\${VERSION}|${{ env.VERSION }}|g" ./manifest.yaml
  #         cat ./manifest.yaml  # Optional: print to verify the changes
      


      - name: Apply Kubernetes manifest
        run: |
          kubectl apply -f ./manifest.yaml
          kubectl get all 
