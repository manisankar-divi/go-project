name: Release and Tag

on:
  push:
    branches:
      - main # Adjust to your default branch

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Create a Release
        uses: release-drafter/release-drafter@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }} # Dynamic tag name
          release_name: Release v${{ github.run_number }}
          body_path: changelog.md # Optional if you maintain a changelog file
          draft: false
          prerelease: false

      - name: Generate Release Notes
        uses: github/release-drafter@v5
        with:
          config-name: release.yml

# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main
#       - staging
      
#   pull_request:
#     branches:
#       - main
#       - staging

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Go
#         uses: actions/setup-go@v5
#         with:
#           go-version: '1.23.2'

#       - name: Install dependencies
#         run: |
#           go mod tidy  # Ensure the go.mod and go.sum files are up-to-date
#           go get -v ./...
#       - name: Install the application
#         run: go install ./...

#       - name: Run tests
#         run: go test -v ./... || exit 1  # Fail the job if tests fail

#   # Build the application and upload artifact
#   build:
#     runs-on: ubuntu-latest
#     needs: test  # Build job only runs after tests pass
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Build the application
#         run: go build -v -o dist/main ./...

#       - name: Upload build artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: go-build-artifact
#           path: dist/main
#           if-no-files-found: warn

#       - name: Checking artifact
#         run: |
#           ls -la
#           tree dist

#   # Docker build, push to registry.
#   docker_build_push:
#     runs-on: ubuntu-latest
#     needs: build  # Docker build & push only runs after build succeeds
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       # - name: Docker login to Docker Hub
#       #   uses: docker/login-action@v3
#       #   with:
#       #     username: ${{ secrets.DOCKERHUB_USERNAME }}
#       #     password: ${{ secrets.DOCKERHUB_TOKEN }}

#       - name: Read version from VERSION file
#         id: read_version
#         run: |
#           if [ -f VERSION ]; then
#             VERSION=$(cat VERSION | xargs)
#             echo "VERSION=$VERSION" >> $GITHUB_ENV
#           else
#             echo "VERSION file not found!"
#             exit 1
#           fi
#       - name: Build and push Docker image
#         run: |
#           docker build -t manisankardivi/new:${{ env.VERSION }} .
#           FORMATTED_DATE=$(date +v%Y.%m.%d)
#           echo "$FORMATTED_DATE"

#   release-tag:
#       runs-on: ubuntu-latest
#       needs: docker_build_push
  
#       steps:
#         - name: Checkout code
#           uses: actions/checkout@v3
  
#         - name: Set up Git
#           run: |
#             git config user.name "Your Name"
#             git config user.email "youremail@example.com"
#         - name: Get Current Date and Increment Version
#           id: version
#           run: |
#             VERSION_DATE=$(date +'%Y.%m.%d')
#             # Find the latest tag for the current date
#             TAGS=$(git tag -l "v$VERSION_DATE*")
#             MAX_TAG=0
#             for TAG in $TAGS; do
#               # Extract the suffix after the date
#               TAG_SUFFIX=$(echo $TAG | sed 's/^v[0-9]*\.[0-9]*\.[0-9]*\.//')
#               if [ "$TAG_SUFFIX" -gt "$MAX_TAG" ]; then
#                 MAX_TAG=$TAG_SUFFIX
#               fi
#             done
#             # Increment the version number for this commit
#             NEW_TAG="v$VERSION_DATE.$((MAX_TAG + 1))"
#             echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
#         - name: Ensure Tag is Unique and Create Release
#           run: |
#             echo "Creating release for tag: $NEW_TAG"
#             # Fetch tags from remote
#             git fetch --tags
            
#             # Check if the tag already exists
#             if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
#               echo "Tag $NEW_TAG already exists. Creating a new tag."
#               # If tag exists, increment the version
#               VERSION_DATE=$(date +'%Y.%m.%d')
#               MAX_TAG=0
#               TAGS=$(git tag -l "v$VERSION_DATE*")
#               for TAG in $TAGS; do
#                 TAG_SUFFIX=$(echo $TAG | sed 's/^v[0-9]*\.[0-9]*\.[0-9]*\.//')
#                 if [ "$TAG_SUFFIX" -gt "$MAX_TAG" ]; then
#                   MAX_TAG=$TAG_SUFFIX
#                 fi
#               done
#               NEW_TAG="v$VERSION_DATE.$((MAX_TAG + 1))"
#             fi
#             # Create and push the new tag
#             git tag "$NEW_TAG"
#             git push origin "$NEW_TAG"
#             # Create the release for the new tag
#             gh release create "$NEW_TAG" --title "$NEW_TAG" --notes "Release $NEW_TAG" --target "main"
#           env:
#             GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
