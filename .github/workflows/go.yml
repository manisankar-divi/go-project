name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build_and_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.2'
      
      - name: Install dependencies
        run: go mod download
          
      - name: Test with the Go CLI
        run: go test ./...

      - name: Build the application
        run: |
          mkdir -p dist
          go build -o dist/main ./...

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: dist
          if-no-files-found: warn
      # Step 2: Get current version tag from Git tags
      - name: Get current version
        id: version
        run: |
          # Get the latest Git tag (e.g., v1.0.0)
          VERSION=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "Current version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV  # Store version as an environment variable

      # Step 3: Calculate next version (increment patch number)
      - name: Calculate next version
        id: next_version
        run: |
          # Extract the major, minor, and patch versions
          VERSION_NUMBER=$(echo $VERSION | sed 's/^v//')  # Remove the "v" prefix
          MAJOR=$(echo $VERSION_NUMBER | cut -d'.' -f1)
          MINOR=$(echo $VERSION_NUMBER | cut -d'.' -f2)
          PATCH=$(echo $VERSION_NUMBER | cut -d'.' -f3)
          
          # Increment patch version
          PATCH=$((PATCH + 1))

          # Create the next version tag
          NEXT_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "Next version: $NEXT_VERSION"
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV  # Store next version as an environment variable

      # Step 4: Create Git tag for new version
      - name: Create Git tag for new version
        run: |
          git tag $NEXT_VERSION
          git push origin $NEXT_VERSION

      # Step 5: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t manisankardivi/go-sha:$NEXT_VERSION .  # Tag with the new version
          docker images  # Verify the built image

      # Step 6: Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}  # Store your Docker Hub username as a secret
          password: ${{ secrets.DOCKERHUB_TOKEN }}    # Store your Docker Hub token as a secret

      # Step 7: Push Docker image with the new version tag
      - name: Push Docker image
        run: |
          # Push the new version tag to Docker Hub
          docker push manisankardivi/go-sha:$NEXT_VERSION

      # Step 8: Verify Docker images pushed
      - name: Verify Docker images
        run: |
          docker images  # Verify the images pushed to Docker Hub
          docker ps -a  # List all containers

      
  deploy:
    runs-on: self-hosted  
    needs: build_and_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up kubectl
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args: get pods
      
      - name: Check manifest files
        run: ls -la

      - name: Verify Kubernetes resources
        run: kubectl get all -A
