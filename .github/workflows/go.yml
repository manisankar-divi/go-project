name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build_and_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.2'
      
      - name: Install dependencies
        run: go mod download
          
      - name: Test with the Go CLI
        run: go test ./...

      - name: Build the application
        run: |
          mkdir -p dist
          go build -o dist/main ./...

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: dist
          if-no-files-found: warn

      - name: Get version from commit message
        id: version
        run: |
          # Get the latest commit message
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Commit Message: $COMMIT_MESSAGE"
          
          # Extract version from the commit message (assuming it's in format "v1.0.1")
          VERSION=$(echo "$COMMIT_MESSAGE" | grep -oP 'v\d+\.\d+\.\d+')
          
          # If version is found, set it as the environment variable, otherwise fallback to a default version
          if [ -z "$VERSION" ]; then
            VERSION="v0.0.0"  # Fallback version if no version found in commit message
          fi
          
          echo "Version extracted: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Build the Docker image with the extracted version tag
      - name: Build Docker image
        run: |
          docker build -t manisankardivi/test:${{ env.VERSION }} .

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
  
      # Push the Docker image with the extracted version tag
      - name: Push Docker image
        run: |
          docker push myapp:${{ env.VERSION }}
  
      # Verify Docker images pushed
      - name: Verify Docker images
        run: |
          docker images
          docker ps -a
            
      # Create and push the Git tag with the extracted version
      - name: Create and push Git tag
        run: |
          git tag ${{ env.VERSION }}
          git push origin ${{ env.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Ensure authentication for Git push

