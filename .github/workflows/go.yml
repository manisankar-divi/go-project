name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on push to 'main' branch

jobs:
  # Step 1: Checkout code
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

  # Step 2: SonarQube scan (runs in parallel with build)
  sonarcloud:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v3.1.0  
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Step 3: Build the application (runs in parallel with SonarQube)
  build:
    runs-on: ubuntu-latest
    needs: sonarcloud
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.2'

      - name: Build the application
        run: go build -o app-binary main.go

      # Upload the binary as an artifact for the Artifact job
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-binary
          path: ./app-binary

  # Step 4: Artifact handling (runs after build job)
  artifact:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Upload the binary as an artifact for the Artifact job
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-binary
          path: ./app-binary

      # Download the binary as an artifact for the Artifact job
      - name: Download the app-binary artifact
        uses: actions/download-artifact@v4
        with:
          name: app-binary

      - name: List files
        run: pwd && ls -l

  # # Step 5: Docker Build (runs after the Artifact job)
  # docker_build:
  #   runs-on: ubuntu-latest
  #   needs: artifact
  #   steps:
  #     - name: Docker Build
  #       run: |
  #         docker build -t my-app:latest .

  # # Step 6: Trivy vulnerability scan (runs after the Docker build)
  # trivy_scan:
  #   runs-on: ubuntu-latest
  #   needs: docker_build
  #   steps:
  #     - name: Trivy Scan
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: 'my-app:latest'
