# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main
#       - staging
      
#   pull_request:
#     branches:
#       - main
#       - staging

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Go
#         uses: actions/setup-go@v5
#         with:
#           go-version: '1.23.2'

#       - name: Install dependencies
#         run: |
#           go mod tidy  # Ensure the go.mod and go.sum files are up-to-date
#           go get -v ./...
#       - name: Install the application
#         run: go install ./...

#       - name: Run tests
#         run: go test -v ./... || exit 1  # Fail the job if tests fail

#   # Build the application and upload artifact
#   build:
#     runs-on: ubuntu-latest
#     needs: test  # Build job only runs after tests pass
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Build the application
#         run: go build -v -o dist/main ./...

#       - name: Upload build artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: go-build-artifact
#           path: dist/main
#           if-no-files-found: warn

#       - name: Checking artifact
#         run: |
#           ls -la
#           tree dist

#   # Docker build, push to registry.
#   docker_build_push:
#     runs-on: ubuntu-latest
#     needs: build  # Docker build & push only runs after build succeeds
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       # - name: Docker login to Docker Hub
#       #   uses: docker/login-action@v3
#       #   with:
#       #     username: ${{ secrets.DOCKERHUB_USERNAME }}
#       #     password: ${{ secrets.DOCKERHUB_TOKEN }}

#       - name: Read version from VERSION file
#         id: read_version
#         run: |
#           if [ -f VERSION ]; then
#             VERSION=$(cat VERSION | xargs)
#             echo "VERSION=$VERSION" >> $GITHUB_ENV
#           else
#             echo "VERSION file not found!"
#             exit 1
#           fi
#       - name: Build and push Docker image
#         run: |
#           docker build -t manisankardivi/new:${{ env.VERSION }} .
#           FORMATTED_DATE=$(date +v%Y.%m.%d)
#           echo "$FORMATTED_DATE"
          
#   release-tag:
#     runs-on: ubuntu-latest
#     needs: docker_build_push
#     steps:
#       - name: shell script for Release & Tag
#         run: |
#             TODAY=$(date +%Y-%m-%d) 
#             PATCH=1  # Example patch version, adjust dynamically if needed (e.g., increment for each build)
            
#             # Check for any changes in the repository (you can adjust this to check specific files or services)
#             CHANGED_FILES=$(git diff --name-only $GITHUB_SHA^ $GITHUB_SHA)  # Adjust for your CI/CD environment
            
#             # Check if any files were modified
#             if [ -z "$CHANGED_FILES" ]; then
#               echo "No changes detected. Skipping version tag creation."
#               exit 0
#             fi
name: Release Pipeline

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config user.name "Your Name"
          git config user.email "youremail@example.com"

      - name: Get Current Date and Increment Version
        id: version
        run: |
          VERSION_DATE=$(date +'%Y.%m.%d')
          # Find the latest tag for the current date
          TAGS=$(git tag -l "v$VERSION_DATE*")
          MAX_TAG=0
          for TAG in $TAGS; do
            # Extract the suffix after the date
            TAG_SUFFIX=$(echo $TAG | sed 's/^v[0-9]*\.[0-9]*\.[0-9]*\.//')
            if [ "$TAG_SUFFIX" -gt "$MAX_TAG" ]; then
              MAX_TAG=$TAG_SUFFIX
            fi
          done
          # Increment the version number for this commit
          NEW_TAG="v$VERSION_DATE.$((MAX_TAG + 1))"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Generate Changelog
        id: changelog
        run: |
          PRS=$(gh pr list --state=closed --base=main --sort=updated --json title,author,url -L 100)
          CHANGES="### What's Changed\n"
          CONTRIBUTORS="### New Contributors\n"
          
          for PR in $(echo "$PRS" | jq -r '.[].url'); do
            PR_TITLE=$(echo "$PRS" | jq -r --arg pr_url "$PR" 'map(select(.url == $pr_url)) | .[0].title')
            PR_AUTHOR=$(echo "$PRS" | jq -r --arg pr_url "$PR" 'map(select(.url == $pr_url)) | .[0].author.login')
            PR_NUMBER=$(echo "$PRS" | jq -r --arg pr_url "$PR" 'map(select(.url == $pr_url)) | .[0].number')
            
            CHANGES="$CHANGES\n    $PR_TITLE by @$PR_AUTHOR in #$PR_NUMBER"
            
            # Track new contributors
            CONTRIBUTORS_LIST=$(echo "$PRS" | jq -r --arg pr_url "$PR" 'map(select(.url == $pr_url)) | .[0].author.login')
            for CONTRIBUTOR in $CONTRIBUTORS_LIST; do
              CONTRIBUTORS="$CONTRIBUTORS\n    @$CONTRIBUTOR made their first contribution in #$PR_NUMBER"
            done
          done
          
          echo -e "$CHANGES" > changelog.txt
          echo -e "$CONTRIBUTORS" >> changelog.txt
          cat changelog.txt
          
      - name: Create New Tag and Release
        run: |
          echo "Creating release for tag: $NEW_TAG"
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"
          # Use changelog for release notes
          CHANGELOG=$(cat changelog.txt)
          gh release create "$NEW_TAG" --title "$NEW_TAG" --notes "$CHANGELOG" --target "main"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
